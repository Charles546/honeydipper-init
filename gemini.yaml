---
systems:
  gemini:
    extends:
      - ollama
    functions:
      chat:
        driver: gemini
      chatContinue:
        driver: gemini
      chatStop:
        driver: gemini
      chatListen:
        driver: gemini

drivers:
  gemini:
    engine:
      default:
        model: gemini-2.0-flash
        system_prompt: >
          You are an assistant to software engineers.  web_request tool can be
          used to access internet. Only whiltelisted sites are allowed
          including "www.alphavantage.co" and "api.github.com". Credentials
          such as API key will be added automatically.

          When you create github new branches use hd-ai-test as fork org name,
          and prefix the branches with `ai-`.  You are only allowed to commit
          staged changes to your own branches. Do not assume the base branch or
          default branch is `main`.

          If you don't know something, and didn't find useful information in
          knowledge base, just say you don't know.
        temperature: 0.001

    tools:
      github_stage_change:
        tool:
          functionDeclarations:
            - name: github_stage_change
              description: >
                stage one updated file in memory. Multiple files can be staged
                by calling this method mutiple times.
              parameters:
                type: object
                properties:
                  path:
                    type: string
                    description: the path of the changed file.
                  content:
                    type: string
                    description: the complete updated file content.
                  mode:
                    type: string
                    description: the mode of the file, defaults to "100644"
                required:
                  - path
                  - content
        workflow:
          call_driver: cache.rpush
          function:
            rawAction: rpc
          with:
            parameters:
              key: '{{ .prefix }}/github_changes'
              value:
                file_content: $args.content
                path: $args.path
                encoding: utf-8
                mode: $?args.mode
              toJson: true
            output:
              status: success

      github_clear_staged_changes:
        tool:
          functionDeclarations:
            - name: github_clear_staged_changes
              description: >
                clear staged changes from memory
        workflow:
          call_driver: cache.del
          function:
            rawAction: rpc
          with:
            parameters:
              key: '{{ .prefix }}/github_changes'
            output:
              status: success

      get_file_from_github:
        tool:
          functionDeclarations:
            - name: get_file_from_github
              description: get file content from github
              parameters:
                type: object
                properties:
                  git_repo:
                    type: string
                    description: the combined string with user name and repo name, for example myorg/myrepo.
                  path:
                    type: string
                    decription: the path of the file in the repo, for example /src/index.js
                  git_ref:
                    type: string
                    description: >
                      the branch name, tag name or a commit hash, if missing
                      HEAD branch will be used, for example v1.2, d3e456a or
                      main. Don't assume the head branch is main or master, use
                      blank if uncertain.
                required:
                  - git_repo
                  - path
        workflow:
          call_workflow: ai/get_file_from_github

      github_commit_changes:
        tool:
          functionDeclarations:
            - name: github_commit_changes
              description: commit changes to github branch
              parameters:
                type: object
                properties:
                  git_repo:
                    type: string
                    description: >
                      the full name of the git repo including the user name or
                      org name, such as, myorg/myrepo.
                  git_branch:
                    type: string
                    decription: the branch that the changes are pushed into
                  commit_title:
                    type: string
                    description: the title of the commit.
                  commit_message:
                    type: string
                    description: a description of the changes just made.
                required:
                  - git_repo
                  - git_branch
                  - commit_title
        workflow:
          call_workflow: ai/github_commit_changes
          with:
            _local:
              changes_json: '@cache:del,,github_changes'

      github_new_branch:
        tool:
          functionDeclarations:
            - name: github_new_branch
              description: create a new branch in a repo so changes can be staged.
              parameters:
                type: object
                properties:
                  fork_org:
                    type: string
                    description: >
                      create the branch on a forked repo in this org instead of
                      using the same repo as source repo.
                  source_repo:
                    type: string
                    decription: >
                      specify the source repo for the base branch, for example,
                      source_org/source_repo.
                  base_branch:
                    type: string
                    description: >
                      the name of the branch to base the new branch on.
                  new_branch:
                    type: string
                    description: >
                      the name of the branch to create. If the branch already
                      existed, it will be updated to match the `source_branch`.
                required:
                  - source_repo
                  - base_branch
                  - new_branch
        workflow:
          call_workflow: ai/github_new_branch

      github_create_pr:
        tool:
          functionDeclarations:
            - name: github_create_pr
              description: create a GitHub pull request from a branch with already staged changes.
              parameters:
                type: object
                properties:
                  git_repo:
                    type: string
                    description: >
                      the full name of the git repo including the user name or
                      org name, such as, myorg/myrepo.
                  PR_content:
                    type: object
                    properties:
                      title:
                        type: string
                        description: the title of the pull request
                      head:
                        type: string
                        description: >
                          the branch that contains the changes. If the branch
                          is in a forked repo, prefix the branch name with the
                          fork org name and a colon. For example, "my-branch",
                          "my-fork-org:my-branch"
                      head_repo:
                        type: string
                        description: >
                          if the changes are in a forked repo, this specifies
                          the name of the forked repo, for example
                          "my-fork/repo"
                      base:
                        type: string
                        description: >
                          the branch where the changes need to be merged into,
                          if missing, use the default branch of the repo.
                      body:
                        type: string
                        description: a description of the pull request
                    required:
                      - title
                      - head
        workflow:
          call_function: github_pat.createPR
          export:
            _output:
              PR_number: $ctx.PR.number
              PR_url: $ctx.PR.html_url

      github_get_default_branch:
        tool:
          functionDeclarations:
            - name: github_get_default_branch
              description: get the default branch of the repo, do NOT assume it is main or master.
              parameters:
                type: object
                properties:
                  git_repo:
                    type: string
                    description: >
                      the full name of the git repo, such as, myorg/myrepo.
                required:
                  - git_repo
        workflow:
          function:
            target:
              system: github_pat
              function: getRepo
          export:
            _output:
              default_branch: $ctx.repo.default_branch

      github_update_pr:
        tool:
          functionDeclarations:
            - name: github_update_pr
              description: update a GitHub pull request.
              parameters:
                type: object
                properties:
                  pr_number:
                    type: string
                    description: the PR number
                  git_repo:
                    type: string
                    description: >
                      the full name of the git repo including the user name or
                      org name, such as, myorg/myrepo.
                  PR_content:
                    type: object
                    properties:
                      title:
                        type: string
                        description: the title of the pull request
                      body:
                        type: string
                        description: a description of the pull request
                      state:
                        type: string
                        description: the state of the PR open or closed.
        workflow:
          function:
            target:
              system: github_pat
              function: api
            parameters:
              method: PATCH
              content: $ctx.PR_content
            export_on_success:
              PR: $data.json
          with:
            resource_path: repos/{{ .ctx.git_repo }}/pulls/{{ .ctx.pr_number }}
          export:
            _output:
              PR_state: $ctx.PR.state
              PR_number: $ctx.PR.number
              PR_url: $ctx.PR.html_url

      search_github:
        tool:
          functionDeclarations:
            - name: search_github
              description: search code issues users repos on github
              parameters:
                type: object
                properties:
                  search_type:
                    type: string
                    description: the type of the content to search
                    format: enum
                    enum:
                      - code
                      - commits
                      - issues
                      - labels
                      - repositories
                      - topics
                      - users
                  page_num:
                    type: string
                    decription: the expected page of the results to return, defaults to 1
                  search_query:
                    type: string
                    description: the search keywords and filters to use for the search
                required:
                  - search_type
                  - search_query
        workflow:
          call_workflow: ai/search_github

      web_request:
        tool:
          functionDeclarations:
            - name: web_request
              description: |
                This function enables the AI mode to access internet. It fetches
                the content of a web page at the given url.
              parameters:
                type: object
                properties:
                  URL:
                    type: string
                    description: the url for the web page. Don't encode & to '&amp'; don't encode anything.
                requried:
                  - URL
        workflow:
          call_workflow: ai/web_request

      search_knowledge_base:
        tool:
          functionDeclarations:
            - name: search_knowledge_base
              description: >
                search the knowledge for related information.
              parameters:
                type: object
                properties:
                  question:
                    type: string
                    description: construct a question to ask to get related info.
                required:
                  - question
        workflow:
          call_driver: "driver:qdrant.query"
          function:
            rawAction: rpc
          with:
            parameters:
              question: $args.question
              knowledge_base: honeydipper_qdrant
            output:
              info: $ret.related_info
              status: success
