---
rules:
  - when:
      source:
        system: github
        trigger: push
    do:
      if_match:
        - git_repo: Charles546/honeydipper-init
          git_ref: refs/heads/main
      call_workflow: reload
      description: reload honeydipper

  - when:
      source:
        system: slack_ai
        trigger: events
    do:
      context: mute

  - when:
      source:
        system: slack_ai
        trigger: chat_request
      if_match:
        json:
          event:
            channel_type: im
            ':absent:':
              - subtype
            ':except:':
              text: stop
      export:
        chat_system: slack_ai
        ai_system: &ai_per_channel '{{ if eq .event.json.event.channel "C08ND4H5ETZ" }}llama3{{ else }}gemini{{ end }}'

    do:
      context: mute
      call_workflow: ai_chat
      with:
        - thread_ts: $ctx.slack_payload.event.thread_ts,ctx.slack_payload.event.ts
          prompt: $ctx.slack_payload.event.text
          user: '<@{{ .ctx.slack_payload.event.user }}>'
        - convID: '{{ .ctx.slack_payload.event.user }}-{{ .ctx.thread_ts }}'

  - when:
      source:
        system: slack_ai
        trigger: chat_request
      if_match:
        json:
          event:
            channel_type: im
            text: stop
            ':present:':
              - thread_ts
      export:
        chat_system: slack_ai
        ai_system: *ai_per_channel

    do:
      context: mute
      call_function: '{{ .ctx.ai_system }}.chatStop'
      with:
        - thread_ts: $ctx.slack_payload.event.thread_ts
        - convID: '{{ .ctx.slack_payload.event.user }}-{{ .ctx.thread_ts }}'

  - when:
      source:
        system: slack_ai
        trigger: events_verification
    do: {}

  - when:
      source:
        system: slack_ai
        trigger: chat_request
      if_match:
        json:
          event:
            type: app_mention
            ':absent:':
              - subtype
            ':except:':
              text: ':regex:stop$'
      export:
        chat_system: slack_ai
        ai_system: *ai_per_channel

    do:
      context: mute
      call_workflow: ai_chat
      with:
        - thread_ts: $ctx.slack_payload.event.thread_ts,ctx.slack_payload.event.ts
          prompt: '{{ .ctx.slack_payload.event.text | replace ( printf "<@%s>" .ctx.slack_user_id ) "" }}'
          user: '<@{{ .ctx.slack_payload.event.user }}>'
        - convID: '{{ .ctx.slack_payload.event.channel }}-{{ .ctx.thread_ts }}'

  - when:
      source:
        system: slack_ai
        trigger: chat_request
      if_match:
        json:
          event:
            type: app_mention
            text: ':regex:stop$'
            ':present:':
              - thread_ts
      export:
        chat_system: slack_ai
        ai_system: *ai_per_channel
    do:
      context: mute
      call_function: '{{ .ctx.ai_system }}.chatStop'
      with:
        - thread_ts: $ctx.slack_payload.event.thread_ts
        - convID: '{{ .ctx.slack_payload.event.channel }}-{{ .ctx.thread_ts }}'

  - when:
      source:
        system: slack_ai
        trigger: chat_survey
      if_match:
        json:
          event:
            ':absent:':
              - subtype
            ':except:':
              channel_type: im
      export:
        ai_system: *ai_per_channel
    do:
      context: mute
      call_function: '{{ .ctx.ai_system }}.chatListen'
      with:
        - thread_ts: $ctx.slack_payload.event.thread_ts,ctx.slack_payload.event.ts
          notify_on_error*: []
          notify*: []
          user: '<@{{ .ctx.slack_payload.event.user }}>'
          prompt: $ctx.slack_payload.event.text
        - convID: '{{ .ctx.slack_payload.event.channel }}-{{ .ctx.thread_ts }}'

