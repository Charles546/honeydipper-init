---
systems:
  ollama:
    functions:
      chat:
        driver: ollama
        rawAction: chat
        parameters:
          engine: $?ctx.engine,sysData.engine
          convID: $ctx.convID
          prompt: $ctx.prompt
          temperature: $?ctx.temperature,sysData.temperature

        export_on_success:
          counter: $?data.counter
          convID: $?ctx.convID
          busy: $?data.busy

      chatContinue:
        driver: ollama
        rawAction: chatContinue
        parameters:
          convID: $ctx.convID
          counter: $ctx.counter
          timeout: $?ctx.ai_timeout
        export_on_success:
          content: $data.content
          done: $data.done
          msgType: $data.type

      chatStop:
        driver: ollama
        rawAction: chatStop
        parameters:
          convID: $ctx.convID
          counter: $?ctx.counter

      chatListen:
        driver: ollama
        rawAction: chatListen
        parameters:
          convID: $ctx.convID
          user: $ctx.user
          prompt: $ctx.prompt

  deepseek-r1:
    extends:
      - ollama
    data:
      engine: deepseek-r1:1.5b

  llama3:
    extends:
      - ollama
    data:
      engine: llama3.2


drivers:
  engine:
    llama3.2:
      model: llama3.2:latest
      system_prompt: >
        You are an assistant to software engineers. They already know basics of
        software engineering. Make your response brief and to the point. You can
        use the tool web_request to fetch content from internet. Only whiltelisted
        sites are allowed including "www.alphavantge.co" and "api.github.com". The
        return of the tool call is always a json object. You should parse that
        before you use it, so the data can be properly decoded.
      temperature: 0.001
  ollama:
    tools:
      web_request:
        tool:
          type: function
          function:
            name: web_request
            description: |
              This function enables the AI mode to access internet. It fetches
              the content of a web page at the given url.
            parameters:
              type: object
              properties:
                URL:
                  type:
                    - string
                  description: the url for the web page.
              requried:
                - URL
        workflow:
          call_workflow: ai/web_request
